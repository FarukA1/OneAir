@page
@model OneAir.Views.Home.IndexModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="text-center">
    <h3 class="display-4">OneAir Monitoring System</h3>
    <div id="demo"></div>
    <div id="mapid"></div>
    <div id="chart"></div>
</div>

<style>
    #mapid {
        height: 600px;
    }
    #chart {
        max-width: 1000px;
        margin: 35px auto;
    }
</style>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
        integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
        crossorigin="">

</script>

<script>

async function getLocation() {
    var location = document.getElementById("demo");

    @* Adapted from w3schools (w3schools, n.d.) *@
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            let lat = position.coords.latitude;
            let long = position.coords.longitude;

            @*end of adapted code*@

            location.innerHTML = "<h4>Your Location</h4>" + "Latitude: " + position.coords.latitude +
                "<br>Longitude: " + position.coords.longitude;


            const mymap = L.map('mapid').setView([lat, long], 13);

            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZmFydWthMSIsImEiOiJja2p2bGpic2YwYTFuMndzZHpjbXowdTFsIn0.w6ULN29W4Chm7-L37UwW5Q', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'your.mapbox.access.token'
            }).addTo(mymap);

            const api_url = 'https://oneair.1809152.win.studentwebserver.co.uk/api/airqualities';

            async function getData() {
                const response = await fetch(api_url);
                const data = await response.json();
                console.log(data);

                const good = data.filter(x => x.pM25 <= 35)
                const moderate = data.filter(x => x.pM25 >= 36 && x.pM25 <= 53)
                const usg = data.filter(x => x.pM25 >= 54 && x.pM25 <= 58)
                const unhealthy = data.filter(x => x.pM25 >= 59 && x.pM25 <= 64)
                const veryUnhealthy = data.filter(x => x.pM25 >= 65 && x.pM25 <= 70)
                const hazardous = data.filter(x => x.pM25 >= 71)

                function getColor(pM25) {

                    @* Adapted from Leaflet(Leaflet, n.d.) *@
                        return pM25 <= 35 ? '#00ff00' :
                        pM25 <= 53 ? '#ffff00' :
                            pM25 <= 58 ? '#ffa500' :
                                pM25 <= 64 ? '#ff0000' :
                                    pM25 <= 70 ? '#800080' :
                                        pM25 >= 71 ? '#800000' :
                                            '#000000';
                    @* end of adapted code *@
                }

                function getText(pM25) {

                    return pM25 <= 35 ? 'Good' :
                        pM25 <= 53 ? 'Moderate' :
                            pM25 <= 58 ? 'Unhealthy for Sensitive Groups' :
                                pM25 <= 64 ? 'Unhealthy' :
                                    pM25 <= 70 ? 'Very Unhealthy' :
                                        pM25 >= 71 ? 'Hazardous' :
                                            'Good';
                }


                function getImage(pM25) {

                    @* passing image for pM2.5 between 0 - 35 *@
                        var imgGood = document.createElement('img');
                    imgGood.src = 'img/Good.png'

                    @* passing image for pM2.5 between 36 - 53 *@
                        var imgModerate = document.createElement('img');
                    imgModerate.src = 'img/Moderate.png'

                    @* passing image for pM2.5 between 54 - 58 *@
                        var imgUnhealthySensitiveG = document.createElement('img');
                    imgUnhealthySensitiveG.src = 'img/Unhealthy_Sensitive_Group.png'

                    @* passing image for pM2.5 between 59 - 64 *@
                        var imgUnhealthy = document.createElement('img');
                    imgUnhealthy.src = 'img/Unhealthy.png'

                    @* passing image for pM2.5 between 65 - 70 *@
                        var imgVeryUnhealthy = document.createElement('img');
                    imgVeryUnhealthy.src = 'img/Very_Unhealthy.png'

                    @* passing image for pM2.5 between 71 - higher *@
                        var imgHazadous = document.createElement('img');
                    imgHazadous.src = 'img/Hazadous.png'

                    return pM25 <= 35 ? imgGood.src :
                        pM25 <= 53 ? imgModerate.src :
                            pM25 <= 58 ? imgUnhealthySensitiveG.src :
                                pM25 <= 64 ? imgUnhealthy.src :
                                    pM25 <= 70 ? imgVeryUnhealthy.src :
                                        pM25 >= 71 ? imgHazadous.src :
                                            imgGood.src;

                }

                for (var i = 0; i < data.length; ++i) {

                    var allData = L.circle([data[i].latitude, data[i].longitude], { color: getColor(data[i].pM25) })
                        .bindPopup(
                            '<h3 class="text-center"> Location ' + data[i].airQualityID + ' Details</h3>' +
                            '<img style="width:70%;display:block;margin-left:auto;margin-right:auto;" src=' + getImage(data[i].pM25) + '>' +
                            '<div' + ' style="background-color:' + getColor(data[i].pM25) + ';text-align:center; border: 2px outset #000000;">' +
                            '<h4>' + getText(data[i].pM25) + ' - ' + data[i].pM25 + 'pM' + '</h4>' +
                            '</div>' +
                            '<div>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> DeviceID: ' + data[i].deviceID + '</p>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> Time: ' + data[i].time + '</p>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> Latitude: ' + data[i].latitude + '</p>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> Longitude: ' + data[i].longitude + '</p>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> pM10: ' + data[i].pM10 + '</p>' +
                            '<p class="text-center" style="font-size:13px;font-weight:bold;"> pM2.5: ' + data[i].pM25 + '</p>' +
                            '</div>'
                        )
                        @*.addTo(mymap);*@

                    allData.addTo(mymap)
                }

            }

            getData();

            async function chart() {
                const respnseChart = await fetch(api_url);
                const dataChart = await respnseChart.json();
                console.log(dataChart)

                const pmDate = []
                const pm25Value = []
                const pm10Value = []

                for (let i = 0; i < dataChart.length; i++) {
                    const dcDate = dataChart[i].time;
                    pmDate.push(dcDate)
                }
                for (let i = 0; i < dataChart.length; i++) {
                    const dC25 = dataChart[i].pM25;
                    pm25Value.push(parseFloat(dC25))
                }
                for (let i = 0; i < dataChart.length; i++) {
                    const dC10 = dataChart[i].pM10;
                    pm10Value.push(parseFloat(dC10))
                }

                var options = {
                    series: [{
                        name: 'pM 2.5',
                        data: pm25Value
                    }, {
                        name: 'pM 10',
                        data: pm10Value
                    }],
                    chart: {
                        height: 350,
                        type: 'line'
                    },
                    dataLabels: {
                        enabled: false
                    },
                    stroke: {
                        curve: 'smooth'
                    },
                    title: {
                        text: 'Air Quality Chart',
                        align: 'left'
                    },
                    xaxis: {
                        type: 'datetime',
                        categories: pmDate
                    },
                    tooltip: {
                        x: {
                            format: 'dd/MM/yy HH:mm'
                        },
                    },
                    annotations: {
                        yaxis: [{
                            y: 0,
                            y2: 35,
                            borderColor: '#000',
                            fillColor: '#00ff00',
                            opacity: 0.2,
                            label: {
                                borderColor: '#333',
                                style: {
                                    fontSize: '10px',
                                    color: '#333',
                                    background: '#00ff00',
                                },
                                text: 'Good',
                            }
                        },
                            {
                                y: 35,
                                y2: 53,
                                borderColor: '#000',
                                fillColor: '#ffff00',
                                opacity: 0.2,
                                label: {
                                    borderColor: '#333',
                                    style: {
                                        fontSize: '10px',
                                        color: '#333',
                                        background: '#ffff00',
                                    },
                                    text: 'Moderate',
                                }
                            },
                            {
                                y: 53,
                                y2: 58,
                                borderColor: '#000',
                                fillColor: '#ffa500',
                                opacity: 0.2,
                                label: {
                                    borderColor: '#333',
                                    style: {
                                        fontSize: '10px',
                                        color: '#333',
                                        background: '#ffa500',
                                    },
                                    text: 'Unhealthy for Sensitive Groups',
                                }
                            },
                            {
                            y: 58,
                            y2: 64,
                            borderColor: '#000',
                            fillColor: '#ff0000',
                            opacity: 0.2,
                            label: {
                                borderColor: '#333',
                                style: {
                                    fontSize: '10px',
                                    color: '#333',
                                    background: '#ff0000',
                                },
                                text: 'Unhealthy',
                              }
                            },
                            {
                                y: 64,
                                y2: 70,
                                borderColor: '#000',
                                fillColor: '#800080',
                                opacity: 0.2,
                                label: {
                                    borderColor: '#333',
                                    style: {
                                        fontSize: '10px',
                                        color: '#333',
                                        background: '#800080',
                                    },
                                    text: 'Very Unhealthy',
                                }
                            },
                            {
                                y: 70,
                                y2: 80,
                                borderColor: '#000',
                                fillColor: '#800000',
                                opacity: 0.2,
                                label: {
                                    borderColor: '#333',
                                    style: {
                                        fontSize: '10px',
                                        color: '#333',
                                        background: '#800000',
                                    },
                                    text: 'Hazardous',
                                }
                            }],
                    },
                };

                const chart = new ApexCharts(document.querySelector("#chart"), options);

                chart.render();
            }
            chart();

        });
    } else {
        location.innerHTML = "Geolocation is not supported by this browser.";
    }
}

    getLocation();
</script>


@*Leaflet. (n.d). Interactive Choropleth Map.
    Retrieved from https://leafletjs.com/examples/choropleth/*@

@*w3schools. (n.d). HTML Geolocation API.
    Retrieved from https://www.w3schools.com/html/html5_geolocation.asp*@
